<li class="project-item">
    <div class="item hvr-reveal-float-top hvr-overline-from-left">

        <p class="title">
            <i class="fa fa-tasks title-icon"></i> Course projects spanning big data, text mining, machine learning and social network
analysis
        </p> 
        <p class="text">
        <strong>Techniques</strong>: Apache Spark | AWS cloud | text mining | TF-IDF | topic modeling | supervised machine learning | social network analysis | node importance | link prediction
        </p>
        <div class="body">
                <p>
                </p>
                <ul>
                    <li>
                        <div class="number">1</div>
                        <div class="task-item-text">
                        Introduction to Apache Spark and AWS: Analyze the ebooks from the Gutenberg Project
                         (the largest collection of free ebooks) by building a Spark cluster on EC2. Ebook in RDF format was
                          manipulated using Python RDFlib and queried with SPARQL. From the collection of unstructured data, 
                          I extracted the number of times each ebook had mentioned males and females and finally stored the 
                          structured data in csv format on AWS S3.
                        </div>
                        <div class="clear"></div>
                    </li>
                    <li>
                        <div class="number">2</div>
                        <div class="task-item-text">
                            Applied Text Mining in Python: (I) Spam email classification. For feature engineering, 
                            I obtained TF-IDF for single word, 2-gram 5-gram as the primary features and added features 
                            such as email length, number of digits mentioned, and number of non-word characters. A L2 penalized 
                            logistic regression model was used to make the final prediction. (II): Evaluate the quality of 
                            paraphrases generated by human using document similarity calculated based on word similarity. 
                            (III) Topic modeling of news using Gensim’s Latent Dirichlet Allocation (LDA) model.
                        </div>
                        <div class="clear"></div>
                    </li>
                    <li>
                        <div class="number">3</div>
                        <div class="task-item-text">
                            Applied Social Network Analysis in Python: (I) Given a company’s email communication network, 
                            predict whether an employee will receive a manager-level salary. 
                            I extracted different node metrics including degree, closeness, betweenness and page rank, 
                            which department the person is working at and optimized a gradient 
                            boosted decision trees classifier using cross-validation that achieved an AUC of 0.95. 
                            (II) Given an employee connection network, predict future connections that employees will build later.
                        </div>
                        <div class="clear"></div>
                    </li>
                    <li>
                        <div class="number">4</div>
                        <div class="task-item-text">Built a website with Flask and deployed it on Amazon EC2 using Beanstalk, 
                            now live at: <a href="http://stackbooks.us-west-2.elasticbeanstalk.com/" target="_blank">StackBooks</aL
                        </div>
                        <div class="clear"></div>
                    </li>
                </ul>
        </div>
    </div>
</li>